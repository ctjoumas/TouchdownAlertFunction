name: Build and deploy .NET Core application to Function App TouchdownAndBigPlayAlertFunction
on:
  push:
    branches:
    - master
    
# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# 1. Paste the RBAC json into the following secret in your repository:
#   AZURE_RBAC_CREDENTIALS
#
# 2. Change these variables for your configuration:
env:
  AZURE_FUNCTIONAPP_NAME: 'TouchdownAndBigPlayAlertFunctionTest'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './published'       # set this to the path to your function app project, defaults to the repository root
  AZURE_RESOURCE_GROUP: 'FantasyFootball'
  CONFIGURATION: Release
  DOTNET_VERSION: '8.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
  DOTNET_INSTALL_DIR: "./.dotnet"
  WORKING_DIRECTORY: .
  STORAGE_ACCOUNT_NAME: 'fantasyfootballa08a'
  
jobs:
  build-and-deploy:
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    #- name: 'Login via Azure CLI'
    #  uses: azure/login@v1
    #  with:
    #    creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}
    - name: Azure login
      uses: azure/login@v2
      with:
        auth-type: IDENTITY
        tenant-id: ${{ secrets.TENANT_ID }}
        subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
        enable-AzPSSession: false
      
    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore
      run: dotnet restore "${{ env.WORKING_DIRECTORY }}\PlayAlertFunction.csproj"
      
    - name: Build
      #run: dotnet build "${{ env.WORKING_DIRECTORY }}\PlayAlertFunction.csproj" --configuration ${{ env.CONFIGURATION }} --no-restore
      run: dotnet build "${{ env.WORKING_DIRECTORY }}\PlayAlertFunction.csproj" --configuration ${{ env.CONFIGURATION }}
      
    - name: Publish
      #run: dotnet publish "${{ env.WORKING_DIRECTORY }}\PlayAlertFunction.csproj" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
      run: dotnet publish "${{ env.WORKING_DIRECTORY }}\PlayAlertFunction.csproj" --configuration ${{ env.CONFIGURATION }} --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}" -v diag
      
    #- name: Publish Artifacts
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: functionapp
    #    path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    #- name: 'Install Azure Functions Core Tools'
    #  run: |
    #    # Install Azure Functions Core Tools via npm (now that npm is available)
    #    sudo npm install -g azure-functions-core-tools@4 --unsafe-perm true
        
        # Verify installation
    #    func --version

    - name: 'Create Fresh Function App'
      run: |
         echo "Creating fresh Function App with correct runtime..."
         
         # Create Function App with .NET 8 isolated runtime
         az functionapp create \
           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
           --consumption-plan-location "East US" \
           --runtime dotnet-isolated \
           --runtime-version 8 \
           --functions-version 4 \
           --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
           --storage-account ${{ env.STORAGE_ACCOUNT_NAME }}
         
         echo "Waiting for Function App creation to complete..."
         sleep 180
         
         echo "Function App created successfully"
    
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1.5.2
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        response-funcignore: true
      env:
        SCM_DO_BUILD_DURING_DEPLOYMENT: false
    
    
    - name: 'Verify Deployment'
      run: |
        echo "Verifying deployment..."
        sleep 30
        
        # Check if the function app is responding
        curl -f "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/" || echo "Function app might still be starting up"
        
        echo "Deployment completed successfully"
